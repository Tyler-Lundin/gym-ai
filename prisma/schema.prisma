generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UnitSystem {
  METRIC // meters / centimeters / kgs
  IMPERIAL // feet / inches / lbs
}

model User {
  // User
  id        String     @id @unique @default(cuid())
  authId    String
  username  String
  email     String?    @unique
  createdAt DateTime   @default(now())
  // Settings
  isInit    Boolean // is initialized or not
  units     UnitSystem // enum { IMPERIAL or METRIC }
  // Stats ? - Optional
  height_ft Int?
  height_in Int?
  height_cm Int?
  weight    Int?

  // Combined Macrocycle stats
  totalWorkouts Int?
  totalWeight   Float?
  totalReps     Int?

  // Relationships
  macros   Macrocycle[] // ~ 6 months - groups mesos 
  mesos    Mesocycle[] /// ~ 8 weeks  - groups micros
  micros   Microcycle[] // ~ 1 week   - groups workouts
  goals    Goal[]
  notes    Note[]
  metadata Json? // e.g., {"averageRestTime": 60, "mostFrequentExercise": "Squat"} 
  entries  Entry[]
}

model Exercise {
  id              String   @id @default(cuid())
  name            String // e.g., "Bench Press"
  categories      String[] // e.g., "Strength", "Cardio"
  description     String? // e.g., "A compound exercise targeting the chest."
  musclesTargeted String[] // e.g., ["Chest", "Triceps", "Shoulders"]
  equipment       String[] // e.g., "Barbell, Dumbbells"
  createdAt       DateTime @default(now())
  metadata        Json? // e.g., {"averageRestTime": 60, "mostFrequentExercise": "Squat"} 
}

model Workout {
  id          String      @id @default(cuid())
  name        String // e.g., "Upper Body Day"
  date        DateTime    @default(now())
  userId      String
  entries     Entry[] // Planned exercises for the workout
  cycleId     String?
  micro       Microcycle? @relation(fields: [cycleId], references: [id])
  notes       String? // General notes about the workout
  totalWeight Float?
  totalReps   Int?
  metadata    Json? // e.g., {"averageRestTime": 60, "mostFrequentExercise": "Squat"} 
  createdAt   DateTime    @default(now())
}

model Entry {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  workoutId  String?
  workout    Workout? @relation(fields: [workoutId], references: [id])
  exerciseId String?
  sets       Int? // Planned sets
  reps       Int? // Planned reps
  weight     Float? // Planned weight
  duration   Int? // Planned duration (e.g., for cardio)
  restTime   Int? // Planned rest time between sets (in seconds)
  metadata   Json? // e.g., {"averageRestTime": 60, "mostFrequentExercise": "Squat"} 
  prompt     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Macrocycle {
  id          String      @id @default(cuid())
  name        String // e.g., "12-Week Training Plan"
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  mesocycles  Mesocycle[]
  description String? // e.g., "Plan focused on strength and hypertrophy."
  startDate   DateTime
  endDate     DateTime?
  totalWeight Float?
  totalReps   Int?
  metadata    Json? // e.g., {"averageRestTime": 60, "mostFrequentExercise": "Squat"} 
  createdAt   DateTime    @default(now())
}

model Mesocycle {
  id          String       @id @default(cuid())
  name        String // e.g., "Hypertrophy Phase"
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime?
  macroId     String?
  macro       Macrocycle?  @relation(fields: [macroId], references: [id])
  notes       String? // Notes about the cycle
  metadata    Json? // Data for tracking progress
  Microcycle  Microcycle[]
  totalWeight Float?
  totalReps   Int?
  createdAt   DateTime     @default(now())
}

model Microcycle {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  startDate   DateTime
  endDate     DateTime?
  mesoId      String?
  meso        Mesocycle? @relation(fields: [mesoId], references: [id])
  workouts    Workout[]
  totalWeight Float?
  totalReps   Int?
  createdAt   DateTime   @default(now())
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  description String // e.g., "Increase 1RM Bench Press by 10%"
  targetDate  DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  metadata    Json? // Data for tracking progress or AI integration
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  body      String
  createdAt DateTime @default(now())
  metadata  Json? // e.g., {"averageRestTime": 60, "mostFrequentExercise": "Squat"} 
}
