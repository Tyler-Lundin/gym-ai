generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UnitSystem {
  METRIC // meters / centimeters / kgs
  IMPERIAL // feet / inches / lbs
}

enum Preference {
  STRENGTH
  HYPERTROPHY
  BOTH
}

model User {
  id        String     @id @unique @default(cuid())
  authId    String     @unique
  username  String
  email     String?    @unique
  createdAt DateTime   @default(now())
  isInit    Boolean
  units     UnitSystem

  // Training Structure
  scheduleId String?
  macros     Macrocycle[]
  mesos      Mesocycle[]
  micros     Microcycle[]
  goals      Goal[]
  notes      Note[]
  entries    Entry[]

  // User Statistics
  stats    UserStats[]
  metadata Json? // {"averageRestTime": 60, "mostFrequentExercise": "Squat"}
  Schedule Schedule?
}

model Schedule {
  id         String     @id @default(cuid())
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id])
  pattern    Boolean[] // [true, true, false, ...] (Training/Rest)
  preference Preference // Strength, Hypertrophy, Both
  createdAt  DateTime   @default(now())
  startDate  DateTime   @default(now())
}

model UserStats {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  userId        String
  user          User?    @relation(fields: [userId], references: [id])
  totalWeight   Int      @default(0)
  totalReps     Int      @default(0)
  totalEntries  Int      @default(0)
  totalWorkouts Int      @default(0)
  bodyweightLbs Int      @default(0)
  bodyweightKgs Int      @default(0)
  heightIn      Int      @default(0)
  heightFt      Int      @default(0)
  heightCm      Int      @default(0)
  mood          String?
}

model Exercise {
  id              String   @id @default(cuid())
  name            String
  categories      String[]
  description     String?
  musclesTargeted String[]
  equipment       String[]
  createdAt       DateTime @default(now())
  metadata        Json?
  entries         Entry[]
}

model Workout {
  id             String     @id @default(cuid())
  name           String
  userId         String
  entries        Entry[]
  totalWeight    Float      @default(0)
  totalReps      Int        @default(0)
  totalExercises Int        @default(0)
  metadata       Json?
  createdAt      DateTime   @default(now())
  endedAt        DateTime?
  microcycleId   String
  microcycle     Microcycle @relation(fields: [microcycleId], references: [id])
}

model Entry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  prompt    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Optional Fields
  workoutId  String?
  workout    Workout?  @relation(fields: [workoutId], references: [id])
  exerciseId String?
  exercise   Exercise? @relation(fields: [exerciseId], references: [id])
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?
  restTime   Int?
  metadata   Json?
}

model Macrocycle {
  id          String      @id @default(cuid())
  name        String
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  mesocycles  Mesocycle[]
  description String?
  startDate   DateTime
  endDate     DateTime?
  metadata    Json?
  createdAt   DateTime    @default(now())
}

model Mesocycle {
  id         String       @id @default(cuid())
  name       String
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  startDate  DateTime
  endDate    DateTime?
  macroId    String?
  macro      Macrocycle?  @relation(fields: [macroId], references: [id])
  notes      String?
  metadata   Json?
  Microcycle Microcycle[]
  createdAt  DateTime     @default(now())
}

model Microcycle {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime?
  workouts  Workout[]
  mesoId    String?
  meso      Mesocycle? @relation(fields: [mesoId], references: [id])
  createdAt DateTime   @default(now())
}

model Goal {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  description String
  endDate     DateTime?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  metadata    Json?
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  body      String
  createdAt DateTime @default(now())
  metadata  Json?
}
