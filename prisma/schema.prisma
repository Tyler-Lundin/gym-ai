generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UnitSystem {
  METRIC // meters / centimeters / kgs
  IMPERIAL // feet / inches / lbs
}

model User {
  // User
  id        String     @id @unique @default(cuid())
  authId    String
  username  String
  email     String     @unique
  createdAt DateTime   @default(now())
  // Settings
  isInit    Boolean // is initialized or not
  units     UnitSystem // enum { IMPERIAL or METRIC }
  // Stats ? - Optional
  height_ft Int?
  height_in Int?
  height_kg Int?
  weight    Int?

  // Relationships
  workouts Workout[]
  cycles   Cycle[]
  periods  Period[]
  goals    Goal[]
  notes    String[]
  logs     ExerciseLog[] // Tracks all performance logs for the user
}

model Exercise {
  id              String            @id @default(cuid())
  name            String // e.g., "Bench Press"
  category        String // e.g., "Strength", "Cardio"
  description     String? // e.g., "A compound exercise targeting the chest."
  musclesTargeted String[] // e.g., ["Chest", "Triceps", "Shoulders"]
  equipment       String? // e.g., "Barbell, Dumbbells"
  createdAt       DateTime          @default(now())
  logs            ExerciseLog[]
  WorkoutExercise WorkoutExercise[]
}

model Workout {
  id        String            @id @default(cuid())
  name      String // e.g., "Upper Body Day"
  date      DateTime          @default(now())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  exercises WorkoutExercise[] // Planned exercises for the workout
  cycleId   String?
  cycle     Cycle?            @relation(fields: [cycleId], references: [id])
  notes     String? // General notes about the workout
  metadata  Json? // Structured data for APIs (e.g., {duration: 90, intensity: "high"})
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  workout    Workout  @relation(fields: [workoutId], references: [id])
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Int? // Planned sets
  reps       Int? // Planned reps
  weight     Float? // Planned weight
  duration   Int? // Planned duration (e.g., for cardio)
  restTime   Int? // Planned rest time between sets (in seconds)
  notes      String? // Notes or instructions for this exercise
  metadata   Json? // Custom data for AI or analytics
}

model ExerciseLog {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  exerciseId    String
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  date          DateTime @default(now())
  setsCompleted Int? // Actual sets completed
  repsCompleted Int? // Actual reps completed
  weightUsed    Float? // Actual weight used
  duration      Int? // Actual duration (e.g., for cardio)
  restTime      Int? // Actual rest time (if tracked)
  notes         String? // Feedback or user notes
  metadata      Json? // Data for analysis or AI feedback
}

model Cycle {
  id        String    @id @default(cuid())
  name      String // e.g., "Hypertrophy Phase"
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime?
  periodId  String?
  period    Period?   @relation(fields: [periodId], references: [id])
  workouts  Workout[]
  notes     String? // Notes about the cycle
  metadata  Json? // Data for tracking progress
}

model Period {
  id          String    @id @default(cuid())
  name        String // e.g., "12-Week Training Plan"
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  cycles      Cycle[]
  description String? // e.g., "Plan focused on strength and hypertrophy."
  startDate   DateTime
  endDate     DateTime?
  metadata    Json? // Additional data for analysis or integration
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  description String // e.g., "Increase 1RM Bench Press by 10%"
  targetDate  DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  metadata    Json? // Data for tracking progress or AI integration
}
